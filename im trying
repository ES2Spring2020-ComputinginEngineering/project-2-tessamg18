#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Apr  7 20:10:07 2020

@author: tg
"""

#Please put your code for Step 2 and Step 3 in this file.
import numpy as np
import matplotlib.pyplot as plt
import random


# FUNCTIONS
def openckdfile():
    #unpack=True makes each column an array
    glucose, hemoglobin, classification = np.loadtxt('ckd.csv', delimiter=',', skiprows=1, unpack=True)
    return glucose, hemoglobin, classification


def graphdata(glucose, hemoglobin, classification):
    plt.figure()
    plt.plot(hemoglobin[classification==1],glucose[classification==1], "k.", label = "Class 1")
    plt.plot(hemoglobin[classification==0],glucose[classification==0], "r.", label = "Class 0")
    plt.xlabel("Hemoglobin")
    plt.ylabel("Glucose")
    plt.legend()
    plt.show()

 
def testcase():
    newhemoglobin = random.randint(3,18)
    newglucose = random.randint(70,490)
    return newhemoglobin, newglucose
    

def calculatedistance(newglucose,newhemoglobin,glucose,hemoglobin):
    distance = []
    y=0
    for x in hemoglobin:
        distance.insert(y,np.sqrt( (x-newhemoglobin)**2 + (glucose[y]-newglucose)**2 ))
        y = y+1
    return distance
        

def nearestneighborclassifier(newglucose, newhemoglobin, glucose, hemoglobin, classification):
    distance = calculatedistance(newglucose,newhemoglobin,glucose,hemoglobin)
    minpos = distance.index(min(distance))
    return classification[minpos]
    

def graphtestcase(newglucose,newhemoglobin, glucose, hemoglobin, classification):
    plt.figure()
    plt.plot(hemoglobin[classification==1],glucose[classification==1], "k.", label = "Class 1")
    plt.plot(hemoglobin[classification==0],glucose[classification==0], "r.", label = "Class 0")
    plt.plot(newhemoglobin, newglucose, "g.", label = "new data")
    plt.xlabel("Hemoglobin")
    plt.ylabel("Glucose")
    plt.legend()
    plt.show()
    


# MAIN SCRIPT
glucose, hemoglobin, classification = openckdfile()
newhemoglobin, newglucose = testcase()

hscaled = (hemoglobin-3.1)/(17.8-3.1)
gscaled = (glucose-70)/(490-70)

testcase()
graphdata(glucose, hemoglobin, classification)
graphtestcase(newglucose,newhemoglobin, glucose, hemoglobin, classification)
print(nearestneighborclassifier(newglucose, newhemoglobin, glucose, hemoglobin, classification))

